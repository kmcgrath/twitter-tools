#!/bin/env perl
#===============================================================================
#
#         FILE:  twitterctl
#
#        USAGE:  ./twitterctl --ACTION --PARAM
#                Where ACTION is a Net::Twitter function and PARAM is any number
#                of valid parameters
#
#  DESCRIPTION: A command line interface for Net::Twitter
#
#       AUTHOR:  Kevin McGrath (kevin@baknet.com),
#      VERSION:  0.01
#
#===============================================================================

use strict;
use warnings;

use Net::Twitter;
use Config::Any;
use Any::Renderer;
use Getopt::Long;

my $uniq_method   = {};    # keep a list of unique methods


### Create a Net::Twitter object now so that we have access ###
### to all available methods. Method names will be added as ###
### command line options.  A bit of evil is preformed later ###
### to set OAuth creds.                                     ###
my $nt = Net::Twitter->new(
    traits          => [qw/OAuth API::REST API::Search/],
    consumer_key    => '',
    consumer_secret => '',
);

  
# Option HashRef
my $opt = {
    'config-file' => undef,
    'output-format' => 'Data::Dumper',
};

# Option Definitions
my @opt_defs = (
    'config-file|config_file=s',
    'output-format|output_format:s',
);



# Find all Net::Twitter methods used to interact with twitter
for my $method ( $nt->meta->get_all_methods ) {
    my $mname = $method->name;
    if (
        !$uniq_method->{$mname} 
        && $method->{base_url_method} 
        && $method->name !~ /^_/ 
        && $mname !~ /^[A-Z]+$/
    ) {
        $uniq_method->{$mname} = 1;
    }
}


my $requested_method = shift @ARGV;

die usage() unless $uniq_method->{$requested_method};

my $method = $nt->meta->get_method($requested_method);
my $required_option = {};

create_spec('Switch', $_) for @{$method->{booleans}};
create_spec('Param', $_)  for @{$method->{params}};


# Get command line options
GetOptions($opt,@opt_defs);


# Process script specific options
my $r = Any::Renderer->new(delete $opt->{'output-format'});

if (my $config_file = delete $opt->{'config-file'}) {
    my $c_any = Config::Any->load_files({files => [$config_file], use_ext=>1 });

    my $CFG;
    for (@$c_any) {
        my ($filename, $config) = %$_;
        $CFG = $config;
    }

    $nt->{consumer_key} = $CFG->{consumer_key};
    $nt->{consumer_key} = $CFG->{consumer_secret};
    $nt->access_token($CFG->{access_token});
    $nt->access_token_secret($CFG->{access_token_secret});

}


# Process options for Net::Twitter
my $run_param = {};
while (my ($key,$value)  = each(%$opt) ) {
    $key =~ s/-/_/g;
    $run_param->{$key} = $value if $value;
}



# Run and print 
my $result = $nt->$requested_method($run_param);
print $r->render($result);

exit(0);



sub usage {

    my $usage = "\ntwitterctl METHOD [--OPTION]\n";
    if ($method) {
        $usage .= "\n Options for $requested_method\n";
       
    }
    else {
        $usage .= "\n METHOD is one of:\n";

        foreach my $method (keys %$uniq_method) {
            $usage .= "    $method\n";
        }
    }
  
    print $usage;
    exit(0);
};


sub create_spec {
    my ($spec_type, $param_name) = @_;    

    my ($is_array) = $param_name =~ s/(\[\])$//g;

    $param_name =~ s/_/-/g;
    $param_name =~ s/\[\]//g;
    return unless $param_name =~ /^[\w-]+$/;

    my $opt_def = $param_name;
    $opt_def .= join('','=s',$is_array ? '@' : '') if $spec_type eq 'Param';

    

    push @opt_defs, $opt_def; 
    
}
